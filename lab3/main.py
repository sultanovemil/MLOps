
from scripts.model_training import model_training
import pandas as pd
import streamlit as st

st.set_page_config(
    page_title="Cardiovascular-Disease App",
    page_icon="üßä",
    layout="wide",
    initial_sidebar_state="expanded"
)


def user_input_features():
    age = st.sidebar.slider('–í–æ–∑—Ä–∞—Å—Ç',
                            min_value=10,
                            max_value=100,
                            step=1,
    )
    gender= st.sidebar.selectbox('–ü–æ–ª',
                                options=('–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'),
    )
    height = st.sidebar.slider('–†–æ—Å—Ç (—Å–º)',
                            min_value=100,
                            max_value=200,
                            value=150,
                            step=1,
    )
    weight = st.sidebar.slider('–í–µ—Å (–∫–≥)',
                            min_value=30,
                            max_value=200,
                            value=70,
                            step=1,
    )
    ap_hi = st.sidebar.slider('–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
                            min_value=50,
                            max_value=200,
                            value=120,
                            step=1,
    )
    ap_lo = st.sidebar.slider('–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
                            min_value=50,
                            max_value=200,
                            value=80,
                            step=1,
    )
    cholesterol = st.sidebar.selectbox('–û–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω (–º–º–æ–ª—å/–ª.)',
                                options=('<5','5-63', '>6.3'),
    )
    gluc = st.sidebar.selectbox('–ì–ª—é–∫–æ–∑–∞ (–º–º–æ–ª—å/–ª.)',
                                options=('3.5‚Äî5.5','5.6-9', '>9'),
    )
    smoke = st.sidebar.selectbox('–ö—É—Ä–µ–Ω–∏–µ',
                                options=('–î–∞','–ù–µ—Ç'),
    )
    alco = st.sidebar.selectbox('–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è',
                                options=('–î–∞','–ù–µ—Ç'),
    )
    active = st.sidebar.selectbox('–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                                options=('–î–∞','–ù–µ—Ç'),
    )    
    
    
    def map_gluc(gluc):
        if gluc == '3.5‚Äî5.5':
            return '1'
        elif gluc == '5.6-9':
            return '2'
        else:
            return '3'

    
    def map_cholesterol(cholesterol):
        if cholesterol == '<5':
            return '1'
        elif cholesterol == '5-63':
            return '2'
        else:
            return '3'
    
    
    age = age * 365
    data = {'age': age,
            'gender': '1' if gender == '–ñ–µ–Ω—Å–∫–∏–π' else '0',
            'height': height,
            'weight': weight,
            'ap_hi': ap_hi,
            'ap_lo': ap_lo,
            'cholesterol': map_cholesterol(cholesterol),
            'gluc': map_gluc(gluc),
            'smoke': '1' if smoke == '–î–∞' else '0',
            'alco':  '1' if alco == '–î–∞' else '0',
            'active': '1' if active == '–î–∞' else '0',                      
    }
    features = pd.DataFrame(data, index=[0])
    return features


@st.cache_data()
def get_model():
    model, metric = model_training()
    model_json = {'model': model,
                  'metric': metric}
    return model_json


def main():

    st.write(""" # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–°–°–ó) :heartpulse: """)
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–≤–æ–¥–∞")
    st.divider()
    user_data = user_input_features()
    st.write(" # –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
    new_column_names = {'age': '–í–æ–∑—Ä–∞—Å—Ç (–¥–Ω–µ–π)',
                        'gender': '–ü–æ–ª',
                        'height': '–†–æ—Å—Ç (—Å–º)' ,
                        'weight': '–í–µ—Å (–∫–≥)',
                        'ap_hi': '–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
                        'ap_lo': '–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
                        'cholesterol': '–û–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω',
                        'gluc': '–ì–ª—é–∫–æ–∑–∞',
                        'smoke': '–ö—É—Ä–µ–Ω–∏–µ',
                        'alco':  '–ê–ª–∫–æ–≥–æ–ª—å',
                        'active': '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                        'cardio': 'x',                      
        }
    user_data_rus = user_data.rename(columns=new_column_names)
    st.dataframe(user_data_rus)
    
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ...'):
        model = get_model()
        st.success('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
    
    st.divider()

    diag_btn = st.button("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", type="primary")
    if diag_btn == True:         
        result = ' '.join(map(str, model['model'].predict(user_data)))
        result = "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" if result == "positive" else "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"
        metric = model['metric']
        col1, col2 = st.columns(2)
        col1.metric(label=" # :heartpulse: –†–µ–∑—É–ª—å—Ç–∞—Ç",
                    value=result,
        )
        col2.metric(label=" # –ú–µ—Ç—Ä–∏–∫–∞",
                    value=str(metric),
        )
 
      
if __name__ == "__main__":
    main()